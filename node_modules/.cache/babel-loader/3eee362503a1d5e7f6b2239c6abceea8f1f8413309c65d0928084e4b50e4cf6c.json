{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jil\\\\Desktop\\\\react\\\\tictactoe\\\\tictactoe\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { calculateWinner } from \"./common/Utils\";\nimport Board from \"./Board\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst style = {\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignContent: \"center\",\n    justifyContent: \"space-evenly\",\n    height: \"100%\"\n  },\n  info: {\n    fontSize: \"2rem\",\n    opacity: \"0.5\",\n    textShadow: \"5px 5px #424242\"\n  }\n};\nconst Game = () => {\n  _s();\n  //board state initial = [null,null,null,null,null,null,null,null,null]\n  const [board, setBoard] = useState(Array(9).fill(null));\n  //state to track next turn\n  const [xTurn, setXTurn] = useState(true);\n  //variable to find winner (otherwise equals to null)\n  const winner = calculateWinner(board);\n\n  //everytime checks if winner is present or clicked on marked square then just returns\n  //otherwise update board array's clicked index value with 'X' or 'O'\n  const handleClick = i => {\n    const tmpBoard = [...board];\n    if (!!winner || !!tmpBoard[i]) return;\n    tmpBoard[i] = xTurn ? \"X\" : \"O\";\n    setBoard(tmpBoard);\n    setXTurn(!xTurn);\n  };\n  const resetBoard = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => setBoard(Array(9).fill(null)),\n    children: \"Start Game\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: style.container,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      style: style.info,\n      children: winner ? \"Winner: \" + winner : \"Next Player: \" + (xTurn ? \"X\" : \"O\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      squares: board,\n      handleClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: resetBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"EAJeKm3alRGmVRKIggTsU8VCraQ=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","calculateWinner","Board","jsxDEV","_jsxDEV","style","container","display","flexDirection","alignContent","justifyContent","height","info","fontSize","opacity","textShadow","Game","_s","board","setBoard","Array","fill","xTurn","setXTurn","winner","handleClick","i","tmpBoard","resetBoard","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","squares","_c","$RefreshReg$"],"sources":["C:/Users/Jil/Desktop/react/tictactoe/tictactoe/src/components/Game.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { calculateWinner } from \"./common/Utils\";\r\nimport Board from \"./Board\";\r\n\r\nconst style = {\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignContent: \"center\",\r\n    justifyContent: \"space-evenly\",\r\n    height: \"100%\",\r\n  },\r\n  info: {\r\n    fontSize: \"2rem\",\r\n    opacity: \"0.5\",\r\n    textShadow: \"5px 5px #424242\",\r\n  },\r\n};\r\n\r\nconst Game = () => {\r\n  //board state initial = [null,null,null,null,null,null,null,null,null]\r\n  const [board, setBoard] = useState(Array(9).fill(null));\r\n  //state to track next turn\r\n  const [xTurn, setXTurn] = useState(true);\r\n  //variable to find winner (otherwise equals to null)\r\n  const winner = calculateWinner(board);\r\n\r\n  //everytime checks if winner is present or clicked on marked square then just returns\r\n  //otherwise update board array's clicked index value with 'X' or 'O'\r\n  const handleClick = (i) => {\r\n    const tmpBoard = [...board];\r\n    if (!!winner || !!tmpBoard[i]) return;\r\n\r\n    tmpBoard[i] = xTurn ? \"X\" : \"O\";\r\n    setBoard(tmpBoard);\r\n    setXTurn(!xTurn);\r\n  };\r\n\r\n  const resetBoard = () => (\r\n    <button onClick={() => setBoard(Array(9).fill(null))}>Start Game</button>\r\n  );\r\n\r\n  return (\r\n    <div style={style.container}>\r\n      <p style={style.info}>\r\n        {winner ? \"Winner: \" + winner : \"Next Player: \" + (xTurn ? \"X\" : \"O\")}\r\n      </p>\r\n      <Board squares={board} handleClick={handleClick} />\r\n      <div>{resetBoard()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,eAAe,QAAQ,gBAAgB;AAChD,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,KAAK,GAAG;EACZC,SAAS,EAAE;IACTC,OAAO,EAAE,MAAM;IACfC,aAAa,EAAE,QAAQ;IACvBC,YAAY,EAAE,QAAQ;IACtBC,cAAc,EAAE,cAAc;IAC9BC,MAAM,EAAE;EACV,CAAC;EACDC,IAAI,EAAE;IACJC,QAAQ,EAAE,MAAM;IAChBC,OAAO,EAAE,KAAK;IACdC,UAAU,EAAE;EACd;AACF,CAAC;AAED,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAACoB,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EACvD;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EACxC;EACA,MAAMwB,MAAM,GAAGvB,eAAe,CAACiB,KAAK,CAAC;;EAErC;EACA;EACA,MAAMO,WAAW,GAAIC,CAAC,IAAK;IACzB,MAAMC,QAAQ,GAAG,CAAC,GAAGT,KAAK,CAAC;IAC3B,IAAI,CAAC,CAACM,MAAM,IAAI,CAAC,CAACG,QAAQ,CAACD,CAAC,CAAC,EAAE;IAE/BC,QAAQ,CAACD,CAAC,CAAC,GAAGJ,KAAK,GAAG,GAAG,GAAG,GAAG;IAC/BH,QAAQ,CAACQ,QAAQ,CAAC;IAClBJ,QAAQ,CAAC,CAACD,KAAK,CAAC;EAClB,CAAC;EAED,MAAMM,UAAU,GAAGA,CAAA,kBACjBxB,OAAA;IAAQyB,OAAO,EAAEA,CAAA,KAAMV,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAE;IAAAS,QAAA,EAAC;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACjE;EAED,oBACE9B,OAAA;IAAKC,KAAK,EAAEA,KAAK,CAACC,SAAU;IAAAwB,QAAA,gBAC1B1B,OAAA;MAAGC,KAAK,EAAEA,KAAK,CAACO,IAAK;MAAAkB,QAAA,EAClBN,MAAM,GAAG,UAAU,GAAGA,MAAM,GAAG,eAAe,IAAIF,KAAK,GAAG,GAAG,GAAG,GAAG;IAAC;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACnE,eACJ9B,OAAA,CAACF,KAAK;MAACiC,OAAO,EAAEjB,KAAM;MAACO,WAAW,EAAEA;IAAY;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACnD9B,OAAA;MAAA0B,QAAA,EAAMF,UAAU;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAO;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACrB;AAEV,CAAC;AAACjB,EAAA,CAhCID,IAAI;AAAAoB,EAAA,GAAJpB,IAAI;AAkCV,eAAeA,IAAI;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}